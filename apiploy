# import settings
# add 'settings' to your .gitignore so you don't accidentally a file to github
# settings looks like:
# ## Credentials Keep it secret, keep it safe
# credentials=username:password

# ## defaults
# org=org-name
# environment=environment_name (e.g. test)
# url=api_management_url (as of coding, https://api.enterprise.apigee.com)
# rev=revision_number (e.g. 1)

. settings

# TODO: should we default to creating a new revision?
# TODO: this would require some conditional logic down below, I assume.


function usage() {
  local CMD=`basename $0`
  echo "$CMD: Deploy an API proxy to the Apigee Gateway."
  echo "  Uses the curl utility, which must be available on the path."
  echo "usage: "
  echo "  $CMD [-c creds] [-e new_env_name] [-o orgname] [-r revision] application"
  echo
  echo "Values"
  echo "   org: $org"
  echo "   env: $environment"
  echo "   rev: $rev"
  echo "   url: $url"
  echo "   app: $application"
  echo
  exit 1
}

while getopts "h:e:o:c:r:" opt; do
  case $opt in
    h) usage ;;
    e) environment=$OPTARG ;;
    o) org=$OPTARG ;;
    c) credentials=$OPTARG ;;
    r) rev=$OPTARG ;;
    *) usage ;;
  esac
done

shift $(($OPTIND - 1))

application=`basename $1`

if [ -z "$application" ]; then
  echo "Specify an application."
  echo
  usage
  exit 1
fi

if [ ! -d "$application" ]; then
    echo "The directory does not exist."
    echo "The application name you specify must refer to a directory."
    echo
    usage
    exit 1
fi

## function MYCURL_Q
## Print the curl command, omitting sensitive parameters, then run it.
## side effects:
## 1. puts curl output into file named ${CURL_OUT}. Caller must set the
##    env var prior to calling this function.
## 2. puts curl http_status into variable CURL_RC
function MYCURL_Q() {
  local outargs
  local allargs
  local ix
  local ix2
  local re
  echo
  re="^(-[du]|--user)$" # the curl options to not echo
  # grab the curl args, but skip the basic auth and the payload, if any.
  while [ "$1" ]
  do
      allargs[$ix2]=$1
      let "ix2+=1"
      if [[ $1 =~ $re ]]; then
        shift
        allargs[$ix2]=$1
        let "ix2+=1"
      else
        outargs[$ix]=$1
        let "ix+=1"
      fi
      shift
  done

  [ -z "${CURL_OUT}" ] && CURL_OUT=`mktemp /tmp/apigee-add-env.curl.out.XXXXXX`

  # emit the curl command, without the auth + payload
  ##echo "curl ${allargs[@]}"
  echo "curl ${outargs[@]}"
  # run the curl command
  CURL_RC=`curl -s -w "%{http_code}" -o "${CURL_OUT}" "${allargs[@]}"`
  # emit the http status code
  echo "==> ${CURL_RC}"
}


# un-deploy and delete the existing revision $rev
MYCURL_Q -u ${credentials} -X GET   "${url}/v1/o/$org/apis/$application/revisions/$rev/deployments"
if [[ ! ${CURL_RC} =~ 404 ]]; then
  MYCURL_Q -u ${credentials} -X POST   "${url}/v1/o/$org/apis/$application/revisions/$rev/deployments?action=undeploy&env=$environment"

  MYCURL_Q -u ${credentials} -X DELETE "${url}/v1/o/$org/apis/$application/revisions/$rev"
fi

# create the bundle zip
if [ -f $application.zip ]; then
  rm -rf $application.zip
fi
cd $application
zip -r ../$application.zip apiproxy -x "*/*.*~"
cd ..
unzip -l $application.zip
echo
pwd

# import
MYCURL_Q -u $credentials -X POST "$url/v1/o/$org/apis?action=import&name=$application" -T $application.zip -H "Content-Type: application/octet-stream"
cat ${CURL_OUT}; echo

if [[ ! ${CURL_RC} =~ 201 ]]; then
  echo
  echo "there was an error importing that API bundle..."
else
  # deploy
  MYCURL_Q -u $credentials -X POST "$url/v1/o/$org/apis/$application/revisions/$rev/deployments?action=deploy&env=$environment"
  if [[ ! ${CURL_RC} =~ 200 ]]; then
    cat ${CURL_OUT}; echo
  fi
fi

echo
echo "deleting $application.zip..."

if [ -f $application.zip ]; then
  rm -rf $application.zip
fi

echo
date +"%Y-%m-%d %H:%M:%S"
echo
