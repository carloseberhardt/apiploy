#!/bin/bash
# -*- mode:shell-script; coding:utf-8; -*-
#
# pushapi
#
# A bash script that deploys of API bundles to the
# Apigee Gateway.
#

## defaults
environment=test
url=https://api.enterprise.apigee.com
verbosity=2

# import .pushapi
# This is just a file with credentials=user:password in it, and other default settings.
#
# NB: you should add .pushapi to the .gitignore to avoid uploading
# apigee creds to github.

# credentials=username:password
# org=org-name
# environment=environment_name (e.g. test)
# url=api_management_url (as of coding, https://api.enterprise.apigee.com)
# rev=revision_number (e.g. 1)

. .pushapi

# TODO: should we default to creating a new revision?
# TODO: this would require some conditional logic down below, I assume.

function echoerror() { echo "$@" 1>&2; }

function usage() {
  local CMD=`basename $0`
  echo "$CMD: Deploy an API proxy to the Apigee Gateway."
  echo "  Uses the curl utility, which must be available on the path."
  echo "usage: "
  echo "  $CMD [-q] [-c creds] [-e env_name] [-o org_name] [-r revision_number] application"
  echo
  echo "Current parameter values:"
  echo "  organization: $org"
  echo "   environment: $environment"
  echo "      revision: $rev"
  echo "           url: $url"
  echo "   application: $application"
  echo "     verbosity: $verbosity"
  echo
  echo "You can decrease $verbosity by 1 using the -q option."
  echo
  exit 1
}

function timer() {
  if [[ $# -eq 0 ]]; then
      echo $(date '+%s')
  else
      local  stime=$1
      etime=$(date '+%s')
      if [[ -z "$stime" ]]; then stime=$etime; fi
      dt=$((etime - stime))
      ds=$((dt % 60))
      dm=$(((dt / 60) % 60))
      dh=$((dt / 3600))
      printf '%d:%02d:%02d' $dh $dm $ds
  fi
}


starttime=$(timer)

while getopts "qhe:o:c:r:" opt; do
  case $opt in
    h) usage ;;
    q) verbosity=$(($verbosity-1)) ;;
    e) environment=$OPTARG ;;
    o) org=$OPTARG ;;
    c) credentials=$OPTARG ;;
    r) rev=$OPTARG ;;
    *) usage ;;
  esac
done

shift $(($OPTIND - 1))

## allow for an application directory that is not local
if [ $# -gt 0 ]; then
  application=`basename $1`
fi

if [ -z "$application" ]; then
  echoerror "You must specify an application."
  echoerror
  usage
  exit 1
fi

if [ ! -d "$application" ]; then
    echoerror "The directory does not exist."
    echoerror "The application name you specify must refer to a directory."
    echoerror
    usage
    exit 1
fi


if ! [[ "$rev" =~ ^[0-9]+$ ]] ; then
    echoerror "Bad revision: $rev"
    echoerror "The revision must be a number."
    echoerror
    usage
    exit 1
fi


## function MYCURL_Q
## Print the curl command, omitting sensitive parameters, then run it.
## side effects:
## 1. puts curl output into file named ${CURL_OUT}. Caller must set the
##    env var prior to calling this function.
## 2. puts curl http_status into variable CURL_RC
function MYCURL_Q() {
  local outargs
  local allargs
  local ix
  local ix2
  local re
  re="^(-[du]|--user)$" # the curl options to not echo
  # grab the curl args, but skip the basic auth and the payload, if any.
  while [ "$1" ]
  do
      allargs[$ix2]=$1
      let "ix2+=1"
      if [[ $1 =~ $re ]]; then
        shift
        allargs[$ix2]=$1
        let "ix2+=1"
      else
        outargs[$ix]=$1
        let "ix+=1"
      fi
      shift
  done

  [ -z "${CURL_OUT}" ] && CURL_OUT=`mktemp /tmp/apigee-add-env.curl.out.XXXXXX`

  if [ $verbosity -gt 1 ]; then
    # emit the curl command, without the auth + payload
    echo
    echo "curl ${outargs[@]}"
  fi
  # run the curl command
  CURL_RC=`curl -s -w "%{http_code}" -o "${CURL_OUT}" "${allargs[@]}"`
  if [ $verbosity -gt 1 ]; then
    # emit the http status code
    echo "==> ${CURL_RC}"
    echo
  fi
}

if [ $verbosity -gt 0 ]; then
  echo
  echo "Getting deployments..."
fi
# un-deploy and delete the existing revision $rev
MYCURL_Q -u ${credentials} -X GET   "${url}/v1/o/$org/apis/$application/revisions/$rev/deployments"
if [[ ! ${CURL_RC} =~ 404 ]]; then
  if [ $verbosity -gt 0 ]; then
    echo "Undeploying..."
  fi
  MYCURL_Q -u ${credentials} -X POST   "${url}/v1/o/$org/apis/$application/revisions/$rev/deployments?action=undeploy&env=$environment"
  ## TODO: check return status, exit on fail.

  if [ $verbosity -gt 0 ]; then
    echo "Deleting the existing revision..."
  fi
  MYCURL_Q -u ${credentials} -X DELETE "${url}/v1/o/$org/apis/$application/revisions/$rev"
  ## TODO: check return status, exit on fail.
fi

if [ $verbosity -gt 0 ]; then
  echo "Creating the zip..."
fi
# create the bundle zip
if [ -f $application.zip ]; then
  rm -rf $application.zip
fi
cd $application
ZIP_OUT=`zip -r ../$application.zip apiproxy -x "*/*.*~"`
cd ..
if [ $verbosity -gt 1 ]; then
  #echo $ZIP_OUT
  unzip -l $application.zip
  echo
fi

# import
if [ $verbosity -gt 0 ]; then
  echo "Importing the bundle..."
fi
MYCURL_Q -u $credentials -X POST "$url/v1/o/$org/apis?action=import&name=$application" -T $application.zip -H "Content-Type: application/octet-stream"
if [ $verbosity -gt 1 ]; then
  cat ${CURL_OUT}
  echo
  echo
fi

if [[ ! ${CURL_RC} =~ 201 ]]; then
  echo
  echoerror "there was an error importing that API bundle..."
else
  # deploy
  if [ $verbosity -gt 0 ]; then
    echo "Deploying the API revision..."
  fi
  MYCURL_Q -u $credentials -X POST "$url/v1/o/$org/apis/$application/revisions/$rev/deployments?action=deploy&env=$environment"
  if [[ ! ${CURL_RC} =~ 200 ]]; then
    echo
    echoerror "There was an error deploying that revision of the API."
    cat ${CURL_OUT} 1>&2;
  fi
fi


if [ -f $application.zip ]; then
  if [ $verbosity -gt 0 ]; then
    echo "Deleting $application.zip..."
  fi
  rm -rf $application.zip
fi

if [ $verbosity -gt 1 ]; then
  echo
  echo "done"
  date +"%Y-%m-%d %H:%M:%S"
fi
if [ $verbosity -gt 0 ]; then
  printf 'Elapsed time: %s\n' $(timer $starttime)
  echo
fi
